#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os
import glob
import subprocess
import math
import datetime
import shutil
from optparse import OptionParser


# directory names
results_dir = 'results'
output_dir = os.path.join(results_dir, 'current')
reference_dir = os.path.join(results_dir, 'reference')
html_dir = 'html'

# arguments
n_previous = 2
previous = []
directories = []
basf2_options = []


def parse_arguments():
    '''Parse the command line arguments'''
    
    global n_previous, previous, directories, basf2_options

    usage = '''usage: %prog [options] [packages]

Run basf2 validation tests of the given packages or sub-directories.
If no argument is given all validation tests are run.'''
    parser = OptionParser(usage=usage)
    parser.add_option('-n', type='int', dest='nPrevious', help='number of previous versions', default=2)
    parser.add_option('-p', action='append', dest='previous', help='name of previous version')
    parser.add_option('-o', action='append', dest='basf2_options', help='options that are passed to the validation jobs')
    (options, directories) = parser.parse_args()

    n_previous = options.nPrevious
    if options.previous != None:
        previous = options.previous
    if options.basf2_options != None:
        basf2_options = options.basf2_options

    # remove trailing slashes from directory names
    for index in range(len(directories)):
        entry = directories[index]
        if entry.endswith('/'):
            directories[index] = entry[:-1]

    # check whether a release is set up
    if not (os.environ.has_key('BELLE2_LOCAL_DIR')
            or os.environ.has_key('BELLE2_RELEASE_DIR')):
        sys.stderr.write('Error: no release is set up.\n')
        sys.exit(-1)


def process_dir(dir, output_subdir):
    """Execute validation tests in the given directory"""

    global basf2_options

    # make sure the output directory and reference directory exist
    out_dir = os.path.join(output_dir, output_subdir)
    if not os.path.exists(out_dir):
        os.makedirs(out_dir)
    ref_dir = os.path.join(reference_dir, output_subdir)
    if not os.path.exists(ref_dir):
        os.makedirs(ref_dir)

    # go to the output directory
    cur_dir = os.getcwd()
    os.chdir(out_dir)

    # execute steering files
    for steering in sorted(glob.glob(os.path.join(dir, '*.py'))):
        print 'Running: %s' % steering
        sys.stdout.flush()
        process = subprocess.Popen(['basf2'] + basf2_options + [steering], stdout=subprocess.PIPE,
                                   stderr=subprocess.STDOUT)
        (out, err) = process.communicate()
        if process.returncode != 0:
            print ' -> FAILED'
            print out

    # execute root macros
    for macro in sorted(glob.glob(os.path.join(dir, '*.C'))):
        print 'Running: %s' % macro
        sys.stdout.flush()
        process = subprocess.Popen(['root', '-b', '-q', macro], stdout=subprocess.PIPE,
                                   stderr=subprocess.STDOUT)
        (out, err) = process.communicate()
        if process.returncode != 0:
            print ' -> FAILED'
            print out

    # restore working directory
    os.chdir(cur_dir)

    # copy reference plots
    for reference in sorted(glob.glob(os.path.join(dir, '*.root'))):
        shutil.copy2(reference, ref_dir)


def process_top_dir(release_dir, processed_dirs):
    """Loop over folders in the top release directory"""

    global directories
    dirs = os.listdir(release_dir)
    if len(directories) > 0:
        dirs = directories

    exclude_dirs = [
        'build',
        'include',
        'lib',
        'bin',
        'modules',
        'data',
        'validation',
        ]
    for entry in dirs:
        if entry in processed_dirs:
            continue
        dir_entry = os.path.join(release_dir, entry, 'validation')
        if entry.find('.') > -1 or not os.path.isdir(dir_entry) or entry \
            in exclude_dirs:
            continue
        process_dir(dir_entry, entry)
        processed_dirs.append(entry)


def run_validations():
    '''execute the validation tests'''
    
    # make sure the output directory exists
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # process local or central validation directory
    processed_dirs = []
    if len(directories) == 0 or 'validation' in directories:
        if os.environ.has_key('BELLE2_LOCAL_DIR'):
            validation_dir = os.path.join(os.environ['BELLE2_LOCAL_DIR'], 'validation')
            if os.path.isdir(validation_dir):
                process_dir(validation_dir, 'validation')
                processed_dirs.append(validation_dir)
        if os.environ.has_key('BELLE2_RELEASE_DIR') and len(processed_dirs) == 0:
            validation_dir = os.path.join(os.environ['BELLE2_RELEASE_DIR'], 'validation')
            if os.path.isdir(validation_dir):
                process_dir(validation_dir, 'validation')
                processed_dirs.append(validation_dir)
    
    # process local and central release directories
    if os.environ.has_key('BELLE2_LOCAL_DIR'):
        process_top_dir(os.environ['BELLE2_LOCAL_DIR'], processed_dirs)
    if os.environ.has_key('BELLE2_RELEASE_DIR'):
        process_top_dir(os.environ['BELLE2_RELEASE_DIR'], processed_dirs)


def collect_histos(dir, packages, index):
    """Collect histograms from the given directory"""

    if not os.path.isdir(dir):
        return

    global directories
    dirs = os.listdir(dir)
    if len(directories) > 0:
        dirs = directories

    for entry in dirs:
        dir_entry = os.path.join(dir, entry)
        if entry.find('.') > -1 or not os.path.isdir(dir_entry):
            continue
        if entry not in packages.keys():
            packages[entry] = {}
        for filename in glob.glob(os.path.join(dir_entry, '*.root')):
            basename = os.path.splitext(os.path.basename(filename))[0]
            if basename not in packages[entry].keys():
                packages[entry][basename] = {}
            root_file = ROOT.TFile(filename)
            for key in root_file.GetListOfKeys():
                name = key.GetName()
                obj = root_file.Get(name)
                if not obj:
                    continue
                if obj.InheritsFrom('TH1') or obj.InheritsFrom('TNtuple'):
                    if name not in packages[entry][basename].keys():
                        packages[entry][basename][name] = []
                    while len(packages[entry][basename][name]) <= index:
                        packages[entry][basename][name].append(None)
                    if obj.InheritsFrom('TH1'):
                        obj.SetDirectory(0)
                        packages[entry][basename][name][index] = obj
                    else:
                        obj.GetEntry(0)
                        packages[entry][basename][name][index] = {}
                        for leaf in obj.GetListOfLeaves():
                            packages[entry][basename][name][index][leaf.GetName()] = leaf.GetValue()
                        packages[entry][basename][name][index]['Description'] = obj.GetAlias('Description')
                        packages[entry][basename][name][index]['Check'] = obj.GetAlias('Check')


def collect_previous_histos(packages, versions):
    """Collect histograms of the previous validation tests"""

    dirs = os.listdir(results_dir)
    dirs.remove('current')
    if 'reference' in dirs:
        dirs.remove('reference')
    dirs.sort(key=lambda x:os.stat(os.path.join(results_dir, x)).st_mtime, reverse=True)
    for entry in dirs:
        dir_entry = os.path.join(results_dir, entry)
        if not os.path.isdir(dir_entry):
            continue
        versions.append(entry)
        collect_histos(dir_entry, packages, len(versions)-1)


def create_indices(versions):
    '''Create an array of indices to the selected versions'''

    global n_previous, previous

    # add reference, current, and n_previous versions
    indices = [0, 1]
    index = 1
    while len(indices)-2 < n_previous:
        index += 1
        # make sure the number of displayed versions does not exceed the available number
        if index >= len(versions):
            break
        # exclude explicitly requested versions
        if versions[index] in previous:
            continue
        indices.append(index)
        
    # add those versions, that are explicitly requested
    for version in previous:
        indices.append(versions.index(version))

    return indices

    
def get_styles(index):
    '''Get line and fill style for the given index'''
    
    line_styles = [ROOT.TAttLine(ROOT.kBlack,     1, 3),
                   ROOT.TAttLine(ROOT.kRed,       2, 3),
                   ROOT.TAttLine(ROOT.kBlue,      3, 2),
                   ROOT.TAttLine(ROOT.kGreen+2,   1, 2),
                   ROOT.TAttLine(ROOT.kYellow+2,  1, 2),
                   ROOT.TAttLine(ROOT.kMagenta+2, 1, 2),
                   ROOT.TAttLine(ROOT.kCyan+2,    1, 2),
                   ROOT.TAttLine(ROOT.kOrange+7,  1, 2),
                   ROOT.TAttLine(ROOT.kRed+2,     1, 2)
                   ]
    fill_styles = [ROOT.TAttFill(ROOT.kGray,  1001),
                   ROOT.TAttFill(ROOT.kWhite, 0)
                   ]
    n_styles = len(line_styles)
    if index < n_styles:
        line_index = index
    else:
        line_index = 2 + ((index - n_styles) % (n_styles - 2))
    fill_index = min(index, len(fill_styles)-1)
    return (line_styles[line_index], fill_styles[fill_index])


def compare_histos(ref, cmp):
    '''Compare a histogram to a reference and return a color indicating deviations'''

    if ref and cmp:
        pvalue = ref.Chi2Test(cmp)
        if pvalue < 0.01:
            return ROOT.kRed
        elif pvalue < 1:
            return ROOT.kOrange
    return ROOT.kWhite


def create_html(packages, versions, indices):
    '''Create a html file and write header information'''
    
    # make sure the html directory exists
    if not os.path.exists(html_dir):
        os.makedirs(html_dir)

    # create frameset
    frame = open(os.path.join(html_dir, 'validation.html'), 'w')
    frame.write('''<html>
<head>
<title>Validation</title>
</head>
<frameset cols="250,*">
  <frame src="validation_menu.html" name="menu">
  <frame src="validation_plots.html" name="plots">
</frameset>
</html>
''' )

    # create html file with title, legend, and navigation
    menu = open(os.path.join(html_dir, 'validation_menu.html'), 'w')
    menu.write('''<html>
<body>
<p><b>%s</b></p>
''' % datetime.datetime.now().ctime())
    menu.write('<p>\n<b>Legend:</b>\n<ul>\n')
    for index in range(len(indices)):
        menu.write('<li style="color:%s">%s</li>\n' % (ROOT.gROOT.GetColor(get_styles(index)[0].GetLineColor()).AsHexString(), versions[indices[index]]))
    menu.write('</ul>\n</p><br>\n\n')
    for package in sorted(packages.keys()):
        menu.write('<p><h3><a target="plots" href="validation_plots.html#%s">%s</a></h3>\n<ul>\n' % (package, package))
        for basename in sorted(packages[package].keys()):
            menu.write('<li><a target="plots" href="validation_plots.html#%s_%s">%s</a></li>\n' % (package, basename, basename))
        menu.write('</ul></p>\n\n')
    menu.write('</body>\n</html>\n')

    # create main html file for plots
    html = open(os.path.join(html_dir, 'validation_plots.html'), 'w')    
    html.write('<html>\n<body>\n')
    return html


def make_plots(html, packages, versions, indices):
    '''Create the plots and add them to the html page'''
    
    # produce plots
    for package in sorted(packages.keys()):
        html.write('<br><a name="%s"><h2>%s</h2></a>\n' % (package, package))
        for basename in sorted(packages[package].keys()):
            html.write('<a name="%s_%s"><h3>%s</h3></a>\n' % (package, basename, basename))
            for name in sorted(packages[package][basename].keys()):
                plots = packages[package][basename][name]

                # prepare histograms
                empty = True
                split = False
                ntuple = False
                variables = []
                for index in range(len(indices)):
                    while len(plots) <= indices[index]:
                        plots.append(None)
                    histo = plots[indices[index]]
                    if histo:
                        empty = False
                        if isinstance(histo, ROOT.TH1):
                            (line_style, fill_style) = get_styles(index)
                            histo.SetLineColor(line_style.GetLineColor())
                            histo.SetLineWidth(line_style.GetLineWidth())
                            histo.SetLineStyle(line_style.GetLineStyle())
                            histo.SetFillColor(fill_style.GetFillColor())
                            histo.SetFillStyle(fill_style.GetFillStyle())
                            if histo.InheritsFrom('TH2') or histo.InheritsFrom('TH3'):
                                split = True
                            elif index != 1:
                                histo.SetStats(0)
                        else:
                            ntuple = True
                            variables = histo.keys()

                if empty:
                    continue

                if not ntuple:
                    # create canvas
                    can = ROOT.TCanvas()

                    # compare current and reference histograms
                    if plots[0] and plots[1]:
                        pvalue = plots[0].Chi2Test(plots[1])
                        if pvalue < 0.01:
                            can.SetFillColor(ROOT.kRed)
                        elif pvalue < 1:
                            can.SetFillColor(ROOT.kOrange)
                        if pvalue < 1:
                            sys.stderr.write('Deviation from reference: p = %.4f for %s/%s/%s (%s)\n' % (pvalue, package, basename, name, plots[1].GetTitle()))

                    if split:
                        nSplit = int(math.sqrt(len(indices)-1)) + 1
                        can.Divide(nSplit, nSplit)

                        # draw histograms, one per sub-panel
                        for index in range(len(indices)):
                            histo = plots[indices[index]]
                            if histo:
                                pad = can.cd(index+1)
                                histo.DrawCopy(histo.GetOption())
                                pad.SetFrameFillColor(ROOT.kWhite)
                                pad.Update()
                                pad.GetFrame().SetFillColor(ROOT.kWhite)
                                title = pad.GetListOfPrimitives().FindObject('title')
                                if title:
                                    title.SetTextColor(get_styles(index)[0].GetLineColor())

                    else:
                        # draw histograms: first the reference, then others in reverse order
                        drawn = False
                        if plots[1]:
                            plots[1].DrawCopy()
                            drawn = True
                            can.Update()
                            can.GetFrame().SetFillColor(ROOT.kWhite)

                            
                        for index in [0] + range(len(indices)-1, 0, -1):
                            histo = plots[indices[index]]
                            if histo:
                                if not drawn:
                                    histo.DrawCopy()
                                    drawn = True
                                else:
                                    histo.DrawCopy("SAME")

                    # save image
                    filename = '%s_%s_%s.png' % (package, basename, name)
                    can.Print(os.path.join(html_dir, '%s.png' % filename))
                    can.Print(os.path.join(html_dir, '%s.eps' % filename))
                    html.write('<table cellspacing="10"><tr><td>\n')
                    html.write('<a href="%s.eps"><img src="%s.png"></a></td>\n<td>\n' % (filename, filename))

                    if not plots[1]:
                        html.write('<i><b style="color:red">No current plot!</b></i><br><br>\n');
                    if not plots[0]:
                        html.write('<i style="color:red">No reference plot</o><br><br>\n');

                    description = None
                    if plots[1] and plots[1].FindObject('Description'):
                        description = plots[1].FindObject('Description').GetTitle()
                    if not description and plots[0] and plots[0].FindObject('Description'):
                        description = plots[0].FindObject('Description').GetTitle()
                    if not description:
                        html.write('<b style="color:red">No description</b><br><br>\n');
                    else:
                        html.write('<b>Description:</b><br>\n%s<br><br>\n' % description);

                    check = None
                    if plots[1] and plots[1].FindObject('Check'):
                        check = plots[1].FindObject('Check').GetTitle()
                    if not check and plots[0] and plots[0].FindObject('Check'):
                        check = plots[0].FindObject('Check').GetTitle()
                    if not check:
                        html.write('<b style="color:red">No check</b><br>\n');
                    else:
                        html.write('<i><b>Check:</b><br>\n%s</i><br>\n' % check);

                    html.write('</td></tr></table><br>\n')

                else:
                    html.write('<table cellspacing="10"><tr><td valign="top">\n')
                    html.write('<table border=1>\n<tr><th>%s</th>' % name)
                    for var in variables:
                        if var not in ['Description', 'Check']:
                            html.write('<th>%s</th>' % var)
                    for index in range(len(indices)):
                        html.write('</tr>\n<tr><td align=right style="color:%s">%s</td>' % (ROOT.gROOT.GetColor(get_styles(index)[0].GetLineColor()).AsHexString(), versions[indices[index]]))
                        for var in variables:
                            if var in ['Description', 'Check']:
                                continue
                            values = plots[indices[index]]
                            if values:
                                if not values.has_key(var):
                                    html.write('<td>n/a</td>')
                                elif plots[0] and values[var] != plots[0][var]:
                                    html.write('<td align=right bgcolor="%s">%g</td>' % (ROOT.gROOT.GetColor(ROOT.kOrange).AsHexString(), values[var]))
                                    if index == 1:
                                        sys.stderr.write('Deviation from reference: %.3g != %.3g for %s/%s/%s/%s\n' % (values[var], plots[0][var], package, basename, name, var))
                                else:
                                    html.write('<td align=right>%g</td>' % values[var])
                            else:
                                if plots[0]:
                                    html.write('<td bgcolor="%s">n/a</td>' % ROOT.gROOT.GetColor(ROOT.kOrange).AsHexString())
                                else:
                                    html.write('<td>n/a</td>')
                        html.write('<br>\n')
                    html.write('</tr></table></td>\n<td><br>')

                    if not plots[1]:
                        html.write('<i><b style="color:red">No current data!</b></i><br><br>\n');
                    if not plots[0]:
                        html.write('<i style="color:red">No reference data</o><br><br>\n');

                    description = None
                    if plots[1] and plots[1]['Description']:
                        description = plots[1]['Description']
                    if not description and plots[0] and plots[0]['Description']:
                        description = plots[0]['Description']
                    if not description:
                        html.write('<b style="color:red">No description</b><br><br>\n');
                    else:
                        html.write('<b>Description:</b><br>\n%s<br><br>\n' % description);

                    check = None
                    if plots[1] and plots[1]['Check']:
                        check = plots[1]['Check']
                    if not check and plots[0] and plots[0]['Check']:
                        check = plots[0]['Check']
                    if not check:
                        html.write('<b style="color:red">No check</b><br>\n');
                    else:
                        html.write('<i><b>Check:</b><br>\n%s</i><br>\n' % check);

                    html.write('</td></tr></table><br>\n')


def close_html(html):
    '''Close the html file'''
    
    html.write('''</body>
    </html>
    ''')
    html.close()


# parse command line arguments and run validation tests
parse_arguments()
run_validations()

# initialize root
import ROOT
ROOT.gROOT.SetBatch()
ROOT.gStyle.SetOptStat(1110)
ROOT.gStyle.SetOptFit(101)

# collect output histograms
packages = {}  # dictionary of packages -> dictionary of root files -> dictionary of histograms -> array[version]
versions = ['reference', 'current']
collect_histos(reference_dir, packages, 0)
collect_histos(output_dir, packages, 1)
collect_previous_histos(packages, versions)
indices = create_indices(versions)

# create plots and html file
if len(packages.keys()) > 0:
    html = create_html(packages, versions, indices)
    make_plots(html, packages, versions, indices)
    close_html(html)


