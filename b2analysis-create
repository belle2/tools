#!/bin/bash

# check for help option
if [ "$1" = "--help" -o "$1" = "-h" -o "$1" = "-?" ]; then
  echo
  echo "Usage: `basename $0` directory release"
  echo
  echo "- This command creates a local directory with the given name"
  echo "  for the development of analysis code."
  echo "  It also prepares the build system and adds the analysis"
  echo "  directory to git."
  echo "- The second argument specifies the central release on which"
  echo "  the analysis should be based."
  echo
  exit 0
fi

# check number of arguments
if [ $# -ne 2 ]; then
  echo "Usage: `basename $0` directory release" 1>&2
  exit 1
fi

# read arguments
DIR=$1
if [ -d ${DIR} ]; then
  echo "Error: The directory ${DIR} already exists." 1>&2
  exit 1
fi
RELEASE=$2
if [ ! -d ${VO_BELLE2_SW_DIR}/releases/${RELEASE} ]; then
  echo "Error: The central release ${RELEASE} does not exist." 1>&2
  exit 1
fi

# check git access
git ls-remote ${BELLE2_SOFTWARE_REPOSITORY} master > /dev/null
if [ "$?" != "0" ]; then
  echo "Error: Could not access the git server." 1>&2
  exit 1
fi

# check whether this analysis git repository already exists
ANALYSIS_NAME=${BELLE2_USER}_${DIR}
ANALYSIS_REPOSITORY=${BELLE2_GIT_SERVER}/${BELLE2_ANALYSES_PROJECT}/${ANALYSIS_NAME}.git
REPOSITORY_EXISTS_MASTER=`git ls-remote ${ANALYSIS_REPOSITORY} master 2> /dev/null | wc -l`
REPOSITORY_EXISTS_MAIN=`git ls-remote ${ANALYSIS_REPOSITORY} main 2> /dev/null | wc -l`
if [ "${REPOSITORY_EXISTS_MASTER}" = "1" ] || [ "${REPOSITORY_EXISTS_MAIN}" = "1" ]; then
  echo "Error: The analysis git repository for analysis ${DIR} already exists." 1>&2
  exit 1
fi

# check support of release version
SUPPORTED_RELEASE=`b2anypython -c 'from versioning import supported_release;import sys;print(supported_release(sys.argv[1]))' ${RELEASE}`
if [ "${RELEASE}" != "${SUPPORTED_RELEASE}" ]; then
  echo "Warning: The release ${RELEASE} is not supported any more. It is recommended to use ${SUPPORTED_RELEASE} instead." 1>&2
  read -p "Would you like to continue nevertheless (y/n)? " -n 1 REPLY
  echo
  if [ "$REPLY" != "y" ]; then
    exit 0
  fi
fi

# create analysis git repository
echo "Enter your DESY password to create your analysis directory on the stash server."
wget --user=${BELLE2_USER} --ask-password --auth-no-challenge -o /dev/null -O /dev/null --header="Content-Type: application/json" --post-data='{"name":"'${ANALYSIS_NAME}'"}' "https://stash.desy.de/rest/api/1.0/projects/${BELLE2_ANALYSES_PROJECT}/repos/"
if [ "$?" = "0" ]; then
  REMOTE_EXISTS=1
  git clone ${ANALYSIS_REPOSITORY} ${DIR}
  cd ${DIR}
else
  echo "WARNING: The creation of the analysis directory on the stash server failed. Go to https://stash.desy.de/projects/B2A, click \"Create repository\", then enter the Name \"${ANALYSIS_NAME}\" and click the \"Create repository\" button."
  REMOTE_EXISTS=0
  mkdir ${DIR}
  cd ${DIR}
  git init
  git remote add origin ${ANALYSIS_REPOSITORY}
fi

# get site-scons and write release version to .analysis
ln -s ${VO_BELLE2_SW_DIR}/releases/${RELEASE}/site_scons .
ln -s site_scons/SConstruct .
cat > SConscript <<EOT
Import('env')
# This file specifies the dependencies of your analysis code to parts of the
# Belle 2 Software. It should be fine for most analyses but if you need to link
# against additional libraries please put them here.
env['LIBS'] = [
    'mdst_dataobjects',
    'analysis_dataobjects',
    'analysis',
    'framework',
    '\$ROOT_LIBS',
]
Return('env')
EOT
echo ${RELEASE} > .analysis

# commit to git
echo site_scons > .gitignore
echo SConstruct >> .gitignore
git add .analysis .gitignore SConscript
git commit -a -m "Analysis ${DIR} by ${BELLE2_USER}"
if [ "${REMOTE_EXISTS}" = "1" ]; then
  git push origin master
fi

# inform user about successful completion
echo
echo "New analysis directory created for ${RELEASE} release: ${DIR}"
echo "-> change to the new directory and set up the environment: cd ${DIR}; b2setup"
