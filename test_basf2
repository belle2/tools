#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os
import glob
import subprocess
import difflib


def compare_log(template_file, log, diff_lines=0):
    """Compare the log output to the content of a template file"""

    if os.path.isfile(template_file):
        diff = list(difflib.unified_diff(
            open(template_file).read().splitlines()[1:],
            log.splitlines()[1:],
            fromfile='template',
            tofile='current',
            lineterm='',
            n=0,
            ))
        if len(diff) > 0:
            if diff_lines > 0:
                print '\n'.join(diff[2:2 + diff_lines])
            return False

    return True


def run_test(steering, release_dir):
    """Run the test for the given steering file"""

    print 'Test: %s' % steering.lstrip(release_dir)
    process = subprocess.Popen(['ls', steering], stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE)
    (out, err) = process.communicate()
    if process.returncode != 0:
        print ' -> FAILED'
        return False
    else:
        if compare_log(steering[:-2] + 'out', out) \
            and compare_log(steering[:-2] + 'err', err):
            print ' -> passed'
            return True
        else:
            print ' -> FAILED  (logs differ)'
            return False


def process_dir(dir, release_dir):
    """Search a directory for test steering files"""

    tests_passed = 0
    tests_failed = 0
    exclude_dirs = [
        'include',
        'src',
        'tools',
        'scripts',
        'data',
        'doc',
        'examples',
        ]
    for entry in os.listdir(dir):
        dir_entry = os.path.join(dir, entry)
        if entry.find('.') > -1 or not os.path.isdir(dir_entry) or entry \
            in exclude_dirs:
            continue
        if entry == 'tests':
            for steering in glob.glob(os.path.join(dir_entry, '*.py')):
                if run_test(steering, release_dir):
                    tests_passed += 1
                else:
                    tests_failed += 1
        else:
            (passed, failed) = process_dir(dir_entry, release_dir)
            tests_passed += passed
            tests_failed += failed

    return (tests_passed, tests_failed)


def process_top_dir(release_dir, processed_dirs):
    """Loop over folders in the top release directory"""

    tests_passed = 0
    tests_failed = 0

    dirs = os.listdir(release_dir)
    if len(sys.argv) > 1:
        dirs = sys.argv[1:]

    exclude_dirs = [
        'build',
        'include',
        'lib',
        'bin',
        'modules',
        'data',
        'externals',
        ]
    for entry in dirs:
        if entry in processed_dirs:
            continue
        dir_entry = os.path.join(release_dir, entry)
        if entry.find('.') > -1 or not os.path.isdir(dir_entry) or entry \
            in exclude_dirs:
            continue
        (passed, failed) = process_dir(dir_entry, release_dir)
        tests_passed += passed
        tests_failed += failed
        processed_dirs.append(entry)

    return (tests_passed, tests_failed)


# check for help option
if len(sys.argv) >= 2 and sys.argv[1] in ['--help', '-h', '-?']:
    sys.stderr.write("""
Usage: test_basf2 [directories]
    
Run basf2 tests of the given packages or sub-directories.
If no argument is given all tests are run.

""")
    sys.exit(0)

# check whether a release is set up
if not (os.environ.has_key('BELLE2_LOCAL_DIR')
        or os.environ.has_key('BELLE2_RELEASE_DIR')):
    sys.stderr.write('Error: no release is set up.\n')
    sys.exit(-1)

# process local and central release directories
tests_passed = 0
tests_failed = 0
processed_dirs = []
if os.environ.has_key('BELLE2_LOCAL_DIR'):
    (passed, failed) = process_top_dir(os.environ['BELLE2_LOCAL_DIR'],
                                       processed_dirs)
    tests_passed += passed
    tests_failed += failed
if os.environ.has_key('BELLE2_RELEASE_DIR'):
    (passed, failed) = process_top_dir(os.environ['BELLE2_RELEASE_DIR'],
                                       processed_dirs)
    tests_passed += passed
    tests_failed += failed

# print summary and exit
print '\n %d out of %d tests failed' % (tests_failed, tests_failed
        + tests_passed)
sys.exit(tests_failed)
