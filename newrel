#!/bin/bash

echo "HINT: newrel is deprecated, instead use: b2code-create"

# comparison of versions
function version_greater_equal
{
  test "$(echo -e "$1\n$2" | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n | tail -n 1)" = "$1"
}

# check for help option
if [ "$1" = "--help" -o "$1" = "-h" -o "$1" = "-?" ]; then
  echo
  echo "Usage: `basename $0` directory [release]"
  echo
  echo "- This command creates a local directory with the given name"
  echo "  as basis for a working copy of the Belle II software."
  echo "  It also prepares the build system."
  echo "- If the basis for the code development should be a particular release,"
  echo "  the version can be given as second argument."
  echo "- If no second argument is given, the latest version of the code"
  echo "  (head of git master) is taken."
  echo
  exit 0
fi

# check number of arguments
if [ $# -lt 1 -o $# -gt 2 ]; then
  echo "Usage: `basename $0` directory [release]" 1>&2
  exit 1
fi

# check remote git access
git ls-remote ${BELLE2_SOFTWARE_REPOSITORY} master > /dev/null
if [ "$?" != "0" ]; then
  echo "Error: Could not access the remote git repository." 1>&2
  exit 1
fi

# read arguments
DIR=$1
RELEASE=head
if [ $# -gt 1 ]; then
  RELEASE=$2
  RELEASE_EXISTS=`git ls-remote ${BELLE2_SOFTWARE_REPOSITORY} ${RELEASE} | wc -l`
  if [ "${RELEASE_EXISTS}" = "0" ]; then
    echo "Error: The release ${RELEASE} does not exist." 1>&2
    exit 1
  fi
fi

# create release directory and write release version to .release
if [ -d ${DIR} ]; then
  echo "Error: The directory ${DIR} already exists." 1>&2
  exit 1
fi

# clone the repository and checkout site-scons
git clone --no-checkout ${BELLE2_SOFTWARE_REPOSITORY} ${DIR}
cd ${DIR}
git config branch.master.rebase true
GIT_VERSION=$(git --version | awk '{print $3}')
if version_greater_equal ${GIT_VERSION} 1.7.4 ; then
  git config core.sparsecheckout true
else
  echo "Warning: Because your git version (${GIT_VERSION}) is older than 1.7.4 the support of sparse checkouts is disabled."
  echo "=> When you have set up a git version >= 1.7.4, e.g. from the externals development version, you can re-enable it by executing 'git config core.sparsecheckout true' in your local release directory."
fi
if [ "${RELEASE}" == "head" ]; then
  echo "/*" >> .git/info/sparse-checkout
  for PACKAGE in ${BELLE2_EXCLUDE_PACKAGES}; do
    echo "!/${PACKAGE}/" >> .git/info/sparse-checkout
  done
  git checkout master
else
  touch .git/info/sparse-checkout
  ln -s ${VO_BELLE2_SW_DIR}/releases/${RELEASE}/.externals .
  ln -s ${VO_BELLE2_SW_DIR}/releases/${RELEASE}/site_scons .
fi

echo ${RELEASE} > .release
ln -s site_scons/SConstruct .

# install hooks
rm -rf .git/hooks
ln -sf ${BELLE2_TOOLS}/hooks .git/hooks

# inform user about successful completion
echo "New local directory created for ${RELEASE} release: ${DIR}"
echo "-> change to the new directory and set up the environment: cd ${DIR}; setuprel"
