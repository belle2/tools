#!/usr/bin/env bash

# If there is nothing to commit we do nothing.
# This might happen for git commit --amend to reword the commit message
if git diff --cached --quiet; then
  exit 0
fi

# Check the tools setup (needed for checkstyle)
if [ -z "${BELLE2_TOOLS}" ]; then
  echo "The tools are not set up, aborting commit."
  echo "Source tools/b2setup to set up the tools."
  exit 1
fi

# Check the externals setup (needed for astyle and pep8)
if [ -z "${BELLE2_EXTERNALS_DIR}" ]; then
  echo "The externals are not set up, aborting commit."
  echo "Set up a release with 'b2setup' or the externals with 'b2setup-externals'."
  exit 1
fi

# Check whether the email address is set
git config --get user.email &> /dev/null
if [ $? -ne 0 ]; then
  echo "Your email address is not set, aborting commit."
  echo "Please run 'git config --global user.email \"your_email@example.com\"' with your correct email address."
  exit 1
fi

# Check that the commit does not introduce duplicates
DUPLICATES=$(git ls-tree -r --name-only $new_rev | sort -f | uniq -Di)
if [[ "$DUPLICATES" != "" ]]; then
  echo "Duplicate files that differ only by case are not allowed:" >&2
  echo "${DUPLICATES}" >&2
  exit 1
fi

# Do not check merge commits to non-main branches
BRANCH=`git rev-parse --abbrev-ref HEAD`
if [ "$BRANCH" != "main" ]; then
  MERGE=`git rev-parse -q --verify MERGE_HEAD`
  if [ -n "$MERGE" ]; then
    exit 0
  fi
fi

# To check the files to be commited we need a temporary dir as there might
# be differences between the file in the index and the file on disk
TMPDIR=`mktemp -d`
if [ $? -ne 0 ]; then
  echo "Problem creating temp dir, aborting commit."
  exit 1
fi

# Find out which files were modified
FILES_MODIFIED=`git diff --cached --name-only`
# Place a copy of the versions to be commited in the temp dir
# Add empty file with suffix .deleted for deleted files
for FILE in ${FILES_MODIFIED}; do
  git checkout-index --prefix=${TMPDIR}/ -- "${FILE}" &> /dev/null
  if [ ! -f "${TMPDIR}/${FILE}" ]; then
    mkdir -p `dirname "${TMPDIR}/${FILE}"`
    touch "${TMPDIR}/${FILE}.deleted"
  fi
done

# Find out the paths in the main branch containing imported code:
# here we "copy" the .imported files into the temporary directory,
# since b2code-style-check needs them for skipping the imported code
FILES_IMPORTED=`git ls-tree --name-only -r main | grep '\.imported'`
for FILE in ${FILES_IMPORTED}; do
  if [[ ! -f "${TMPDIR}/${FILE}" ]]; then
      git checkout-index --prefix=${TMPDIR}/ -- "${FILE}" &> /dev/null
  fi
done

# Add librarians and authors information
git archive -o ${TMPDIR}/access.tar --prefix=access/ main `git ls-tree --name-only -r main | grep ".authors\|.librarians"`

RESULT=0

# Check the code style
${BELLE2_TOOLS}/hooks/check_style.py ${TMPDIR}
if [ $? -ne 0 ]; then
  RESULT=2
fi

# Check the file sizes
${BELLE2_TOOLS}/hooks/check_size.py ${TMPDIR}
if [ $? -ne 0 ]; then
  RESULT=3
fi

# Check the branch name
if ! [[ "$BRANCH" =~ ^(feature|bugfix)/ ]]; then
  if [ "$BELLE2_ACCESS_CHECK" != "no" ]; then
    if [ "$BELLE2_ACCESS_CHECK" = "warn" ]; then
      echo "=> WARNING: You will not be able to push your changes to the central repository."
    else
      echo "=> You can set BELLE2_ACCESS_CHECK to 'warn' or 'no' to be able to commit to your local repository, BUT:"
      RESULT=4
    fi
    echo "   It is recommended to commit your changes to a new feature or bugfix branch."
  fi
fi

# Clean up the temp dir
rm -r ${TMPDIR}

# Return check result
if [ $RESULT -ne 0 ]; then
  echo
  echo "*** Commit aborted (see reasons above) ***"
fi

exit $RESULT
