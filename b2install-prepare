#!/bin/bash

NO_PROMPT=no
INSTALL_OPTION=4
for i in "$@"; do
  case $i in
    --non-interactive)
      NO_PROMPT=yes
      ;;
    tools)
      INSTALL_OPTION=1
      ;;
    light)
      INSTALL_OPTION=2
      ;;
    basf2)
      INSTALL_OPTION=3
      ;;
    build)
      INSTALL_OPTION=4
      ;;
    externals)
      INSTALL_OPTION=5
      ;;
    all)
      INSTALL_OPTION=6
      ;;
    *)
      cat <<EOT
Usage: b2install-prepare [--non-interactive] [tools|light|basf2|build|externals|all]

It will check if all necessary packages are installed and if not it will
ask the user if it should do it. If --non-interactive is given it will not
ask but just install the necessary packages.

The purpose for which the necessary packages are installed is given by one
of the following arguments:

  tools: for using the tools
  light: for using a (light) basf2 release, without graphics
  basf2: for using a full basf2 release, including graphics
  build: for building basf2 [default]
  externals: for building the externals
  all: for building the externals including optional packages

A given purpose includes all purposes earlier in the list.
EOT
      exit 1
      ;;
    esac
done


# If /etc/os-release is present, read system identifier from it
OS_RELEASE_ID="<unknown>"
OS_RELEASE_ID_LIKE="<unknown>"
OS_RELEASE_VERSION="<unknown>"
if [ -f /etc/os-release ]; then
  OS_RELEASE_ID=`(source /etc/os-release && echo $ID)`
  OS_RELEASE_ID_LIKE=`(source /etc/os-release && echo $ID_LIKE)`
  OS_RELEASE_VERSION=`(source /etc/os-release && echo $VERSION_ID)`
fi


if [ $OS_RELEASE_ID == "ubuntu" ] || [[ $OS_RELEASE_ID_LIKE = *ubuntu* ]]; then
  # Ubuntu
  PACKAGES="git python3-setuptools"
  if [[ "$INSTALL_OPTION" > "1" ]]; then
    PACKAGES+=" libfreetype6 diffutils"
  fi
  if [[ "$INSTALL_OPTION" > "2" ]]; then
    PACKAGES+=" libglu1-mesa libglx0 libopengl0 libxpm4 libxft2 libfl2"
  fi
  if [[ "$INSTALL_OPTION" > "3" ]]; then
    PACKAGES+=" libc6-dev pkg-config libsm6 libice6"
  fi
  if [[ "$INSTALL_OPTION" > "4" ]]; then
    PACKAGES+=" make wget unzip xz-utils gcc m4 m4 g++ bzip2 bison texinfo libssl-dev python3-pip libreadline-dev libfreetype-dev libx11-dev libxpm-dev libxft-dev libxext-dev libprotobuf-dev protobuf-compiler rsync"
  fi
  if [[ "$INSTALL_OPTION" > "5" ]]; then
    PACKAGES+=" flex"
  fi
  CHECK_CMD="dpkg -s"
  SU_CMD="sudo"
  # but sometimes there's no sudo (yes official docker images, looking at you ...)
  if ! [ -x "$(command -v sudo)" ]; then
    SU_CMD="su -c"
  fi
  UPDATE_CMD="apt-get update"
  INSTALL_CMD="apt-get install"
  if [ "$NO_PROMPT" = "yes" ]; then
    UPDATE_CMD="DEBIAN_FRONTEND=noninteractive apt-get update -q -y"
    INSTALL_CMD="DEBIAN_FRONTEND=noninteractive apt-get install -q -y"
  fi

elif [ $OS_RELEASE_ID == "debian" ]; then
  # Debian
  PACKAGES="git procps python3"
  if [[ "$INSTALL_OPTION" > "1" ]]; then
    PACKAGES+=" libfreetype6 diffutils"
  fi
  if [[ "$INSTALL_OPTION" > "2" ]]; then
    PACKAGES+=" libglu1-mesa libglx0 libopengl0 libxpm4 libxft2 libfl2 libc6-dev"
  fi
  if [[ "$INSTALL_OPTION" > "3" ]]; then
    PACKAGES+=" pkg-config libsm6 libice6"
  fi
  if [[ "$INSTALL_OPTION" > "4" ]]; then
    PACKAGES+=" make wget unzip xz-utils gcc m4 m4 g++ bzip2 bison texinfo libssl-dev python3-pip libreadline-dev libfreetype-dev libx11-dev libxpm-dev libxft-dev libxext-dev libprotobuf-dev protobuf-compiler rsync"
  fi
  if [[ "$INSTALL_OPTION" > "5" ]]; then
    PACKAGES+=" flex"
  fi
  # Add architecture specification to work on multiarch systems.
  ARCHITECTURE=`dpkg --print-architecture`
  PACKAGES_WITH_ARCHITECTURE=""
  for package in ${PACKAGES}; do
    PACKAGES_WITH_ARCHITECTURE="${PACKAGES_WITH_ARCHITECTURE} ${package}:${ARCHITECTURE}"
  done
  PACKAGES=${PACKAGES_WITH_ARCHITECTURE}
  CHECK_CMD="dpkg -s"
  SU_CMD="su -c"
  UPDATE_CMD="apt-get update"
  INSTALL_CMD="apt-get install"
  if [ "$NO_PROMPT" = "yes" ]; then
    UPDATE_CMD="apt-get update -y"
    INSTALL_CMD="apt-get install -y"
  fi

else
  # RHEL, CentOS, anything else
  PACKAGES="git procps python3"
  if [[ "$INSTALL_OPTION" > "1" ]]; then
    PACKAGES+=" brotli freetype glibc-headers diffutils which"
  fi
  if [[ "$INSTALL_OPTION" > "2" ]]; then
    PACKAGES+=" mesa-libGLU libglvnd-opengl	libtirpc libicu libXpm libXft"
  fi
  if [[ "$INSTALL_OPTION" > "3" ]]; then
    PACKAGES+=" glibc-devel"
    if [[ ! $OS_RELEASE_VERSION < "9" ]]; then
      PACKAGES+=" perl-FindBin perl-File-Copy perl-Sys-Hostname perl-Hash-Util"
    fi
  fi
  if [[ "$INSTALL_OPTION" > "4" ]]; then
    PACKAGES+=" make wget unzip gcc m4 m4 gcc-c++ bzip2 bison texinfo openssl-devel patch readline-devel zlib-devel freetype-devel libX11-devel libXpm-devel libXft-devel libXext-devel protobuf-devel rsync libtirpc-devel"
  fi
  if [[ "$INSTALL_OPTION" > "5" ]]; then
    PACKAGES+=" flex"
  fi
  CHECK_CMD="rpm -q"
  SU_CMD="su -c"
  INSTALL_CMD="dnf install"
  if [ ! -f /etc/redhat-release ]; then
    echo "Unknown linux distribution. Trying installation with yum..."
    INSTALL_CMD="yum install"
  fi
  if [[ $OS_RELEASE_VERSION < "9" ]]; then # el8
    INSTALL_CMD="$INSTALL_CMD --enablerepo=powertools"
  else # el9 or higher
    INSTALL_CMD="$INSTALL_CMD --enablerepo=crb"
  fi
  if [ "$NO_PROMPT" = "yes" ]; then
    INSTALL_CMD="$INSTALL_CMD -y"
  fi
fi
TEXT="already"


# check for missing packages
MISSING_PACKAGES=""
for PACKAGE in ${PACKAGES}; do
  ${CHECK_CMD} ${PACKAGE} &> /dev/null
  if [ "$?" != 0 ]; then
    MISSING_PACKAGES="${MISSING_PACKAGES} ${PACKAGE}"
  fi
done

# check for missing optional packages
MISSING_OPTIONALS=""
for PACKAGE in ${OPTIONALS}; do
  ${CHECK_CMD} ${PACKAGE} &> /dev/null
  if [ "$?" != 0 ]; then
    MISSING_OPTIONALS="${MISSING_OPTIONALS} ${PACKAGE}"
  fi
done


# ask the user to install the missing packages
if [ -n "${MISSING_PACKAGES}" ]; then
  TEXT="now"
  INSTALL_MISSING=${INSTALL_CMD}${MISSING_PACKAGES}
  if [ "${SU_CMD}" != "sudo" ]; then
    INSTALL_MISSING=\"${INSTALL_MISSING}\"
  fi
  if [ "$NO_PROMPT" = "yes" ]; then
    REPLY=y
  else
    echo "The following packages are missing:${MISSING_PACKAGES}

Please install them with the following command:

  ${SU_CMD} ${INSTALL_MISSING}

You will need root access to run this command.
"
    read -p "Would you like to execute it now (y/n)? " -n 1 REPLY
    echo
  fi
  if [ "$REPLY" = "y" ]; then
    if [ "${SU_CMD}" != "sudo" ]; then
      ${SU_CMD} "${UPDATE_CMD}"
      ${SU_CMD} "${INSTALL_CMD}${MISSING_PACKAGES}"
    else
      ${SU_CMD} ${UPDATE_CMD}
      ${SU_CMD} ${INSTALL_MISSING}
    fi
    if [ "$?" != 0 ]; then
      exit 1
    fi
  else
    exit 1
  fi
fi


echo "
All software that is required to use the Belle II software for the
given purpose is ${TEXT} installed on your system.
"
