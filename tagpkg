#!/bin/bash

# check for help option
if [ "$1" = "--help" -o "$1" = "-h" -o "$1" = "-?" ]; then
  echo
  echo "Usage: `basename $0` [\"major\"/\"minor\"/\"patch\"(=default)/tag]"
  echo
  echo "- This command tags the current version of the source code of a package."
  echo "  It has to be called in the package directory of the local release."
  echo "  There should be no locally modified files."
  echo "- If no argument is given, the tag name is chosen automatically by"
  echo "  increasing the patch level number, e.g. from v01-01-01 to v01-01-02."
  echo "- If \"minor\" is given as argument, the minor version number is increased,"
  echo "  e.g. from v01-01-01 to v01-02-01."
  echo "- If \"major\" is given as argument, the major version number is increased,"
  echo "  e.g. from v01-01-01 to v02-01-01."
  echo "- Alternatively the name of the tag can be given explicitly as argument."
  echo
  exit 0
fi

# check number of arguments
if [ $# -gt 1 ]; then
  echo "Usage: `basename $0` [\"major\"/\"minor\"/\"patch\"(=default)/tag]" 1>&2
  exit 1
fi

# determine package name
PACKAGE=`pwd | awk -F/ '{print $NF}'`
svn list ${BELLE2_REPOSITORY}/trunk/software/${PACKAGE} &> /dev/null
if [ "$?" != "0" ]; then
  echo "Error: Not in a package directory." 1>&2
  exit 1
fi

# check whether we are at the head of the trunk and there are no changes
svn info -R | grep URL | grep -v ${BELLE2_REPOSITORY}/trunk/software/${PACKAGE} &> /dev/null
if [ "$?" = "0" ]; then
  echo "Error: Not at the trunk head. Use updatepkg head." 1>&2
  exit 1
fi
STATUS=`svn status -u -q --ignore-externals | wc -l`
if [ "$STATUS" != "1" ]; then
  echo "Error: There are modified files." 1>&2
  exit 1
fi

# determine revision of previous tag
DIFFREV=`svn log ${BELLE2_REPOSITORY}/tags/software/${PACKAGE} 2>/dev/null | head -2 | tail -1 | awk '{print $1}'`
if [ "${DIFFREV}" = "" ]; then
  DIFFREV=r1
fi

# read arguments
TAG=patch
if [ $# -gt 0 ]; then
  TAG=$1
fi

# make tag and exit if tag name is explicitly given
if [ "${TAG}" != "major" -a "${TAG}" != "minor" -a "${TAG}" != "patch" ]; then
  svn copy --parents ${BELLE2_REPOSITORY}/trunk/software/${PACKAGE} ${BELLE2_REPOSITORY}/tags/software/${PACKAGE}/${TAG} -m "tag ${TAG} of package ${PACKAGE}"
  if [ "$?" == "0" ]; then
    echo "Committed tag ${TAG} of ${PACKAGE}."
  fi
  exit 0
fi

# determine last tag
LASTTAG=`svn list ${BELLE2_REPOSITORY}/tags/software/${PACKAGE} 2> /dev/null | grep -e "v[0-9][0-9]-[0-9][0-9]-[0-9][0-9]" |tail -1`
if [ "${LASTTAG}" = "" ]; then
  LASTTAG=v00-00-00
fi

# determine version numbers
declare -i PATCH
if [ "`echo ${LASTTAG} | cut -c 8`" = "0" ]; then
  PATCH=`echo ${LASTTAG} | cut -c 9`
else
  PATCH=`echo ${LASTTAG} | cut -c 8,9`
fi
if [ "${TAG}" = "patch" ]; then
  let PATCH+=1
fi
declare -i MINOR
if [ "`echo ${LASTTAG} | cut -c 5`" = "0" ]; then
  MINOR=`echo ${LASTTAG} | cut -c 6`
else
  MINOR=`echo ${LASTTAG} | cut -c 5,6`
fi
if [ "${TAG}" = "minor" ]; then
  let MINOR+=1
  let PATCH=0
fi
declare -i MAJOR
if [ "`echo ${LASTTAG} | cut -c 2`" = "0" ]; then
  MAJOR=`echo ${LASTTAG} | cut -c 3`
else
  MAJOR=`echo ${LASTTAG} | cut -c 2,3`
fi
if [ "${TAG}" = "major" ]; then
  let MAJOR+=1
  let MINOR=0
  let PATCH=0
fi

# make tag
TAG=`printf "v%02d-%02d-%02d" ${MAJOR} ${MINOR} ${PATCH}`
echo "committing tag ${TAG} of package ${PACKAGE}"
svn copy --parents ${BELLE2_REPOSITORY}/trunk/software/${PACKAGE} ${BELLE2_REPOSITORY}/tags/software/${PACKAGE}/${TAG} -m "tag ${TAG} of package ${PACKAGE}"
if [ "$?" == "0" ]; then
  echo "Committed tag ${TAG} of ${PACKAGE}."
else
  exit 1
fi

# report changes
echo "The changes with respect to the previous tag are:"
svn log -${DIFFREV}:HEAD ${BELLE2_REPOSITORY}/trunk/software/${PACKAGE}
