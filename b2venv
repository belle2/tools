#!/bin/bash

# This script is inspired by the work of Matthew Feickert (https://github.com/matthewfeickert)
# and his 'cvmfs-venv' project. It automates the use of Python virtual environments 
# with libraries and packages sourced from CVMFS, ensuring that software dependencies 
# are maintained and shared across distributed environments.

# Ensure that pip can't install outside a virtual environment
export PIP_REQUIRE_VIRTUALENV=true

# Check if a conda environment is active
if [[ -n "$CONDA_DEFAULT_ENV" ]]; then
    echo "A conda environment ($CONDA_DEFAULT_ENV) is active. Please deactivate your conda environment."
    exit 1
fi

_help_options () {
    cat <<EOF
Usage: b2venv [-n|--name <virtual environment name>] [-t|--tools-dir] [<basf2 release>]

Options:
 -h --help          Print this help message
 -n --name          Specify the name of the virtual environment (default: "venv")
 -t --tools-dir     Path to the directory containing the 'b2setup' script (default: b2venv executable directory)
EOF

  return 0
}

# Default values
_venv_name="venv"
_tools_dir="$(dirname "$(realpath "$0")")"

# CLI API
unset _return_break
while [ $# -gt 0 ]; do
    case "${1}" in
        -h|--help)
            _help_options
            _return_break=0
            break
            ;;
        -n|--name)
            _venv_name="${2}"
            shift 2
            ;;
        -t|--tools-dir)
            _tools_dir="${2}"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            if [[ "${1}" != -* ]]; then
                if [ -z "$_basf2_release" ]; then
                    _basf2_release="${1}"
                    shift
                else
                    echo "ERROR: Unrecognized argument '${1}'"
                    _return_break=1
                    break
                fi
            else
                echo "ERROR: Invalid option '${1}'"
                _return_break=1
                break
            fi
            ;;
    esac
done

# Check if basf2 release is provided
if [ -z "${_basf2_release}" ]; then
    echo "ERROR: basf2 release must be provided as a non-option argument"
    exit 1
fi
_setup_command="source ${_tools_dir}/b2setup ${_basf2_release}"

# FIXME: Find smarter way to filter guard virtual environment creation
if [ -z "${_return_break}" ]; then

# determine text editor to use for complicated edits to the activate script
if [ -x "$(command -v ed)" ]; then
    # default to using 'ed'
    _text_editor="ed"
elif [ -x "$(command -v vi)" ]; then
    # fall back to 'vi'
    _text_editor="vi"
else
    echo "ERROR: Neither 'ed' nor 'vi' is installed. Please install one of them."
    exit 1
fi

echo "Setting up with command: ${_setup_command}"

# Make sure that only the externals python is used
eval "${_setup_command}" &> /dev/null
_setup_ld_lib_path="$LD_LIBRARY_PATH"

if [ ! -d "${_venv_name}" ]; then
    echo "Creating new Python virtual environment '${_venv_name}' with $(python3 --version)"
    python3 -m venv --system-site-packages "${_venv_name}"
    _venv_full_path="$(readlink -f ${_venv_name})"

    # When setting up the Python virtual environment shell variables in the
    # main section of the <venv>/bin/activate script, copy the pattern used
    # for PYTHONHOME to also place the <venv>'s site-packages at the front
    # of PYTHONPATH so that they are ahead of the LCG view's packages in
    # priority.

    _tempfile=$(mktemp)

cat <<EOT > "${_tempfile}"
# Added by b2venv
export LD_LIBRARY_PATH="${_setup_ld_lib_path}"
${_setup_command}
export PIP_PREFIX="${_venv_full_path}"

_OLD_VIRTUAL_PYTHONPATH="\${PYTHONPATH:-}"
unset PYTHONPATH
unset _VIRTUAL_SITE_PACKAGES
_VIRTUAL_SITE_PACKAGES="\$(find \${VIRTUAL_ENV}/lib/ -type d -name site-packages)"
export PYTHONPATH="\${_VIRTUAL_SITE_PACKAGES}:\${_OLD_VIRTUAL_PYTHONPATH}"

# End of b2venv
EOT

    # Find the line number of the last line in deactivate's PYTHONHOME reset
    # if statement block and inject the PYTHONPATH reset if statement block directly
    # after it (2 lines later).
    _SET_PYTHONPATH_INSERT_LINE="$(($(sed -n '\|    unset PYTHONHOME|=' "${_venv_full_path}"/bin/activate) + 2))"

    # Insert the new content into the activate script
    sed -i.bak "52r ${_tempfile}" "${_venv_full_path}/bin/activate"

    rm -f "${_tempfile}"

fi

fi  # _return_break if statement end
