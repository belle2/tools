#!/bin/bash

# check for help option
if [ "$1" = "--help" -o "$1" = "-h" -o "$1" = "-?" ]; then
  echo
  echo "Usage: `basename $0` [-n] [files]"
  echo
  echo "- The fixstyle tool formats the layout of C++ and python code."
  echo "  It helps developers to achieve a common style of all Belle II software."
  echo "- By default it checks all C++ and python files in the current directory and"
  echo "  its subfolders recursively."
  echo "- Individual files can be checked explicitly by giving them as argument."
  echo "- If the -n option is used, only the changes that the fixstyle would apply"
  echo "  are printed. The files are not modified. The return code gives the number"
  echo "  of files that would be changed."
  echo "- The -p option is equivalent to the -n option except that it uses the"
  echo "  pep8 style checker for python code."
  echo "- The -c option is equivalent to the -n option for C++ code, but for python"
  echo "  code it checks whether it follows either the PythonTidy or the pep8 style."
  echo
  exit 0
fi

# check astyle and its version
which astyle &> /dev/null
if [ $? != 0 ]; then
  echo "astyle tool not found. Execute the install.sh script in the ${BELLE2_TOOLS} directory." 1>&2
  exit 1
fi
VERSION=`astyle -V 2>&1`
if [ "${VERSION}" != "Artistic Style Version 2.02" ]; then
  echo "Wrong version of astyle. Execute the install.sh script in the ${BELLE2_TOOLS} directory." 1>&2
  exit 1
fi

# set tools directory if unset
BELLE2_TOOLS=${BELLE2_TOOLS:-`dirname $0`}


# astyle command
ASTYLE="astyle \
--indent=spaces=2 \
--convert-tabs \
--style=stroustrup \
--indent-switches \
--indent-namespaces \
--indent-preprocessor \
--max-instatement-indent=60 \
--min-conditional-indent=0 \
--pad-oper \
--pad-header \
--unpad-paren \
--keep-one-line-statements \
--keep-one-line-blocks \
--suffix=none \
--align-pointer=type \
--align-reference=type \
--formatted"

# define functions for python code formatting
function PythonTidy ()
{
  TMP=`mktemp`
  ${BELLE2_TOOLS}/PythonTidy.py $1 $TMP
  if [ "$?" == 0 ]; then
    if [ "`diff $1 $TMP | wc -l`" != "0" ]; then
      ${BELLE2_TOOLS}/PythonTidy.py $TMP $1
      echo "formatted $1"
    fi
  else
    echo "Formatting of $i failed"
  fi
  rm -f $TMP
}


# count number of files that fail the check
declare -i COUNT
COUNT=0

# define functions for C++ code checking
function AstyleCheck ()
{
  RESULT=1
  TMP=`mktemp`
  TMP2=`mktemp`
  ${ASTYLE} < $1 > $TMP 2> $TMP2
  if [ "$?" == 0 ]; then
    if [ "`diff $1 $TMP | wc -l`" == "0" ]; then
      RESULT=0
    else
      echo "$1:"
      diff $1 $TMP
    fi
  else
    cat $TMP2
  fi
  rm -f $TMP $TMP2
  COUNT+=$RESULT
}

# define functions for python code checking
function PythonTidyCheck ()
{
  RESULT=1
  TMP=`mktemp`
  TMP2=`mktemp`
  ${BELLE2_TOOLS}/PythonTidy.py $1 $TMP 2> $TMP2
  if [ "$?" == 0 ]; then
    ${BELLE2_TOOLS}/PythonTidy.py $TMP $TMP2
    if [ "$?" == 0 ]; then
      if [ "`diff $1 $TMP2 | wc -l`" == "0" ]; then
        RESULT=0
      else
        echo "$1:"
        diff $1 $TMP2
      fi
    fi
  else
    echo "$1:"
    cat $TMP2
  fi
  rm -f $TMP $TMP2
  COUNT+=$RESULT
}

# define functions for pep8 checking
function Pep8Check ()
{
  TMP=`mktemp`
  ${BELLE2_TOOLS}/pep8.py $1 > $TMP 2> /dev/null
  if [ "$?" != 0 ]; then
    COUNT+=1
    echo "$1:"
    cat $TMP
  fi
  rm -f $TMP
}

# define function for PythonTidy or pep8 checking
function PythonTidyOrPep8Check ()
{
  RESULT=1
  TMP=`mktemp`
  TMP2=`mktemp`
  ${BELLE2_TOOLS}/PythonTidy.py $1 $TMP 2> $TMP2
  if [ "$?" == 0 ]; then
    ${BELLE2_TOOLS}/PythonTidy.py $TMP $TMP2
    if [ "$?" == 0 ]; then
      if [ "`diff $1 $TMP2 | wc -l`" == "0" ]; then
        RESULT=0
      fi
    fi
  fi
  rm -f $TMP $TMP2

  if [ "$RESULT" == "1" ]; then
    ${BELLE2_TOOLS}/pep8.py $1 > $TMP 2> /dev/null
    if [ "$?" != 0 ]; then
      COUNT+=1
      echo "$1:"
      cat $TMP
    fi
  fi
  rm -f $TMP
}


# if run in check mode
if [ "$1" = "-n" -o "$1" = "-p" -o "$1" = "-c" ]; then

  PYTHONCHECK=PythonTidyCheck
  if [ "$1" = "-p" ]; then
    PYTHONCHECK=Pep8Check
  fi
  if [ "$1" = "-c" ]; then
    PYTHONCHECK=PythonTidyOrPep8Check
  fi
  shift

  # check all C++ and python code below the current directory if no arguments are given
  if [ $# -lt 1 ]; then
    for i in `find . -name \\*.h`; do
      AstyleCheck $i
    done
    for i in `find . -name \\*.cc`; do
      AstyleCheck $i
    done
    for i in `find . -name \\*.py`; do
      $PYTHONCHECK $i
    done

  # check the specified files
  else
    for i in $*; do
      if [ ! -e $i ]; then
        echo "The file $i does not exist"
      elif [ `echo $i| grep ".py$"` ]; then
        $PYTHONCHECK $i
      elif [ `echo $i| grep ".h$\|.cc$"` ]; then
        AstyleCheck $i
      else
        echo "File of unknown type not checked: $i"
      fi
    done
  fi

  # return number of files that have to be fixed
  exit $COUNT


# if run in fix mode
else
  # fix all C++ and python code below the current directory if no arguments are given
  if [ $# -lt 1 ]; then

    # ask user for confirmation if there are more than 100 files
    FILES=`find . -name \\*.h; find . -name \\*.cc; find . -name \\*.py`
    NFILES=`echo $FILES|wc -w`
    if [ ${NFILES} -gt 100 ]; then
      echo "There are ${NFILES} source files in or below the current directory:"
      pwd
      read -p "Are you sure you want to run fixstyle on all of them? (y/n) " -n 1 REPLY 
      echo
      if [ "$REPLY" != "y" ]; then
        exit 0
      fi
    fi

    ${ASTYLE} --recursive \*.{h,cc}
    for i in `find . -name \\*.py`; do
      PythonTidy $i
    done

  # fix the specified files
  else
    for i in $*; do
      if [ ! -e $i ]; then
        echo "The file $i does not exist"
      elif [ `echo $i| grep ".py$"` ]; then
        PythonTidy $i
      elif [ `echo $i| grep ".h$\|.cc$"` ]; then
        ${ASTYLE} $i
      else
        echo "File of unknown type not formatted: $i"
      fi
    done
  fi
fi

