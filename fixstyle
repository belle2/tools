#!/bin/bash

# check for help option
if [ "$1" = "--help" -o "$1" = "-h" -o "$1" = "-?" ]; then
  echo
  echo "Usage: `basename $0` [-n|-p [-d command]] [files]"
  echo
  echo "- The fixstyle tool formats the layout of C++ and python code."
  echo "  It helps developers to achieve a common style of all Belle II software."
  echo "- By default it checks all C++ and python files in the current directory and"
  echo "  its subfolders recursively."
  echo "- Individual files can be checked explicitly by giving them as argument."
  echo "- If the -n option is used, only the changes that the fixstyle would apply"
  echo "  are printed. The files are not modified. The return code gives the number"
  echo "  of files that would be changed."
  echo "- The -p option is equivalent to the -n option except that it reports the"
  echo "  pep8 output instead of the code changes."
  echo "- The -d option can be used to specify the diff command that is called to"
  echo "  report changes. Has to be given after the -n or -p option."
  echo "- -c is provided for compatibility, but should no longer be used. Its"
  echo "  behaviour is equivalent to the -n option."
  echo
  exit 0
fi

# set tools directory if unset
BELLE2_TOOLS=${BELLE2_TOOLS:-`dirname $0`}

# check astyle and its version
ASTYLE_TOOL=${BELLE2_EXTERNALS_DIR}/${BELLE2_ARCH}/common/bin/astyle
if [ ! -f "${ASTYLE_TOOL}" ]; then
  echo "Warning: astyle is not found in the externals directory."
  echo "Fixstyle will now try to use the system version."
  ASTYLE_TOOL=$(which astyle)
  if [ -z "${ASTYLE_TOOL}" ]; then
    echo "Error: astyle tool not found. Setup the externals." 1>&2
    exit 1
  fi
fi
VERSION=`LC_ALL=C ${ASTYLE_TOOL} -V 2>&1`
if [ "${VERSION}" != "Artistic Style Version 2.05.1" ]; then
  echo "Error: Wrong version of astyle. Setup the latest externals version." 1>&2
  exit 1
fi


# astyle command
ASTYLE="${ASTYLE_TOOL} \
--indent=spaces=2 \
--convert-tabs \
--style=stroustrup \
--indent-switches \
--indent-namespaces \
--indent-preprocessor \
--max-instatement-indent=60 \
--min-conditional-indent=0 \
--pad-oper \
--pad-header \
--unpad-paren \
--keep-one-line-statements \
--keep-one-line-blocks \
--suffix=none \
--align-pointer=type \
--align-reference=type \
--max-code-length=132 \
--lineend=linux \
--formatted"

# autopep8 command
AUTOPEP8CHECK="autopep8 --aggressive --aggressive --max-line-length=132"
AUTOPEP8="${AUTOPEP8CHECK} --in-place"

# pep8 command
PEP8="pep8 --max-line-length=132"

# diff command
DIFF="diff -u"


# count number of files that fail the check
declare -i COUNT
COUNT=0

# define function for C++ code style checking
function AstyleCheck ()
{
  if [ ! -L $1 ]; then
    RESULT=1
    TMP=`mktemp`
    TMP2=`mktemp`
    ${ASTYLE} < $1 > $TMP 2> $TMP2
    if [ "$?" == 0 ]; then
      if [ "`diff $1 $TMP | wc -l`" == "0" ]; then
        RESULT=0
      else
        echo "$1:"
        ${DIFF} $1 $TMP
      fi
    else
      cat $TMP2
    fi
    rm -f $TMP $TMP2
    COUNT+=$RESULT
  fi
}

# define function for python code checking
function Autopep8Check ()
{
  if [ ! -L $1 ]; then
    RESULT=1
    TMP=`mktemp`
    TMP2=`mktemp`
    ${AUTOPEP8CHECK} $1 > $TMP 2> $TMP2
    if [ "$?" == 0 ]; then
      if [ "`diff $1 $TMP | wc -l`" == "0" ]; then
        RESULT=0
      else
        echo "$1:"
        ${DIFF} $1 $TMP
      fi
    else
      cat $TMP2
    fi
    rm -f $TMP $TMP2
    COUNT+=$RESULT
  fi
}

# define function for pep8 checking
function Pep8Check ()
{
  FAIL=0
  if [ ! -L $1 ]; then
    TMP=`mktemp`
    ${PEP8} $1 > $TMP 2> /dev/null
    if [ "$?" != 0 ]; then
      FAIL=1
      cat $TMP
    fi
    rm -f $TMP

    # call file, disable magic checking
    LC_ALL=C file -b -m /dev/null $1 | grep "with CRLF line terminators" > /dev/null 2> /dev/null
    if [ "$?" != 1 ]; then
      FAIL=1
      echo "$1: file has DOS-style (CRLF) line-endings, please use dos2unix or your editor configuration to fix it"
    fi

    if [ "$FAIL" != 0 ]; then
      COUNT+=1
    fi
  fi
}


# if run in check mode
if [ "$1" = "-n" -o "$1" = "-p" -o "$1" = "-c" ]; then

  PYTHONCHECK=Autopep8Check
  if [ "$1" = "-p" ]; then
    PYTHONCHECK=Pep8Check
  fi
  shift

  if [ "$1" = "-d" ]; then
     DIFF=$2
     shift
     shift
  fi

  # check all C++ and python code below the current directory if no arguments are given
  if [ $# -lt 1 ]; then
     for i in `find . -name \\*.h`; do
       AstyleCheck $i
     done
     for i in `find . -name \\*.cc`; do
       AstyleCheck $i
     done
    for i in `find . -name \\*.py`; do
      ${PYTHONCHECK} $i
    done

  # check the specified files
  else
    for i in $*; do
      if [ ! -e $i ]; then
        echo "The file $i does not exist"
      elif [ `echo $i| grep "\.py$"` ]; then
        ${PYTHONCHECK} $i
      elif [ `echo $i| grep "\.h$\|\.cc$"` ]; then
        AstyleCheck $i
      else
        echo "File of unknown type not checked: $i"
      fi
    done
  fi

  # return number of files that have to be fixed
  exit $COUNT


# if run in fix mode
else
  # fix all C++ and python code below the current directory if no arguments are given
  if [ $# -lt 1 ]; then

    # ask user for confirmation if there are more than 100 files
    FILES=`find . -name \\*.h; find . -name \\*.cc; find . -name \\*.py`
    NFILES=`echo $FILES|wc -w`
    if [ ${NFILES} -gt 100 ]; then
      echo "There are ${NFILES} source files in or below the current directory:"
      pwd
      read -p "Are you sure you want to run fixstyle on all of them? (y/n) " -n 1 REPLY 
      echo
      if [ "$REPLY" != "y" ]; then
        exit 0
      fi
    fi

    ${ASTYLE} --recursive \*.{h,cc}
    for i in `find . -name \\*.py`; do
      ${AUTOPEP8} "$i"
      checkstyle "$i" || echo "Some problems in '$i' could not be fixed, please resolve them manually."
    done

  # fix the specified files
  else
    for i in $*; do
      if [ ! -e $i ]; then
        echo "The file $i does not exist"
      elif [ -L $i ]; then
        echo "skipping symbolic link $1"
      elif [ `echo $i| grep "\.py$"` ]; then
        ${AUTOPEP8} "$i"
        checkstyle "$i" || echo "Some problems in '$i' could not be fixed, please resolve them manually."
      elif [ `echo $i| grep "\.h$\|\.cc$"` ]; then
        ${ASTYLE} "$i"
      else
        echo "File of unknown type not formatted: $i"
      fi
    done
  fi
fi
